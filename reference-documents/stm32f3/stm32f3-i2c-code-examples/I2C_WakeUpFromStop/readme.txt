/**
  @page I2C_WakeUpFromStop I2C WakeUp from stop mode
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    I2C/I2C_WakeUpFromStop/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.1
  * @date    31-October-2014
  * @brief   Description of the Wake Up from Stop mode example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
  @endverbatim

@par Example Description 

This example shows how to use the WakeUp from STOP feature of I2C device using 
the CPAL library. This example requires two boards, one configured in master mode
and another one configured in slave mode.

The I2C of the slave board is configured as slave device which enters in STOP mode
after activating The WakeUp from stop ability. 

The master board is used to WakeUp the slave board from STOP. By pushing the key Button
of the master board, the I2C device initialize a communication by sending a Start condition
followed by the address of slave device. 

The slave device is woken Up from STOP if it recognizes its own address. 
The received data is checked and the result is displayed on LCD. 

This procedure is repeated infinitely.

The main.h file contains defines(I2C_MASTER, I2C_SLAVE) that select the type of 
the board(master or slave).

Note: Before entering STOP The I2C clock source must be set to HSI.
 

@par Directory contents 

  - I2C/I2C_WakeUpFromStop/stm32f30x_conf.h                    Library Configuration file
  - I2C/I2C_WakeUpFromStop/stm32f30x_it.c                      Interrupt handlers
  - I2C/I2C_WakeUpFromStop/stm32f30x_it.h                      Interrupt handlers header file
  - I2C/I2C_WakeUpFromStop/main.c                              Main program
  - I2C/I2C_WakeUpFromStop/main.h                              Main program header file 
  - I2C/I2C_WakeUpFromStop/system_stm32f30x.c                  STM32F30x system source file
  - I2C/I2C_TwoBoards/stm32f30x_i2c_cpal_conf.h                CPAL Library Configuration file
  - I2C/I2C_WakeUpFromStop/stm32f30x_i2c_cpal_usercallback.c   CPAL UserCallback source file
  
@note The "system_stm32f30x.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F30x_Clock_Configuration_V1.0.0.xls" 
      provided with the AN4152 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
   
@par Hardware and Software environment

  - This example runs on STM32F30x Devices.
  
  - This example has been tested with STMicroelectronics STM32303C-EVAL (STM32F30x)
    evaluation board and can be easily tailored to any other supported device 
    and development board.

  - STM32303C-EVAL Set-up
    - Two boards must be used to run this example. The type of the board is selected
      by comments or uncomments defines (I2C_MASTER, I2C_SLAVE) located in main.h file.
    - These two boards should be connected as follow after loading the example:
     - Connect I2C2 SCL pin (PF6) to I2C2 SCL pin (PF6)
     - Connect I2C2 SDA pin (PA10) to I2C2 SDA pin (PA10)
     - Connect Gnd pins of two boards.
    - Make sure that JP5 and JP6 jumpers are fitted in position 2-3.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Projects\STM32F30x_StdPeriph_Templates
 - Open your preferred toolchain
 - Add the following files the project source list
     - Libraries\STM32F30x_I2C_CPAL_Driver\src\stm32f30x_i2c_cpal.c
     - Libraries\STM32F30x_I2C_CPAL_Driver\src\stm32f30x_i2c_cpal_hal.c
     - Projects\STM32F30x_StdPeriph_Templates\stm32f30x_i2c_cpal_usercallback.c
     - Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval.c
     - Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval_lcd.c  
 - Rebuild all files and load your image into target memory
 - Run the example

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
