/**
  @page I2C_EEPROM  How to use the I2C to drive an EEPROM memory
  
  @verbatim
  ******************** (C) COPYRIGHT 2014 STMicroelectronics *******************
  * @file    I2C/I2C_EEPROM/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.1
  * @date    31-October-2014
  * @brief   Description of the I2C and M24Mxx or M24Lxx EEPROM communication example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *   
  ******************************************************************************
   @endverbatim

@par Example Description 

This firmware provides a basic example of how to use the I2C firmware library and
an associate I2C EEPROM driver to communicate with an I2C EEPROM device (here the
example is interfacing with M24M01 or M24LR64 EEPROM)

I2C peripheral is configured in Master transmitter during write operation and in
Master receiver during read operation from I2C EEPROM. 

The peripheral used is I2C2 but can be configured by modifying the defines values
in stm32303c_eval.h file.
The maximum speed of communication with M24M01 EEPROM is 1MHz and with M24LR64 is 400kHz.
The speed of communication is configured by setting the value of sEE_I2C_TIMING define
in stm32303c_eval_i2c_ee.h file.

For M24M01 devices all the memory is accessible through the two-bytes 
addressing mode and need to define block addresses. In this case, the physical 
address has to be defined according to the address pins (E0, E1) connection) and
memory block address (A16).

For M24LR64 devices all the memory is accessible through the two-bytes 
addressing mode and need to define block addresses. In this case, the physical 
address has to be defined according to the address pins (E1, E2) connection.

This address is defined in stm32303c_eval_i2c_ee.h. 
The EEPROM addresses where the program start the write and the read operations 
is defined in the main.c file. 

First, the content of Tx1Buffer is written to the sEE_WRITE_ADDRESS1 and the
written data are read. The written and the read buffers data are then compared.
Following the read operation, the program waits that the EEPROM reverts to its 
Standby state. A second write operation is, then, performed and this time, Tx2Buffer
is written to sEE_WRITE_ADDRESS2 which represents the address just after the last 
written one in the first write. After completion of the second write operation, the 
written data are read. The contents of the written and the read buffers are compared.

All transfers are managed in Polling mode by calling sEE_ReadBuffer() or 
sEE_WriteBuffer() function.

User should refer to stm32303c_eval.h file to select which EEPROM use in this example.
    
This example provides the possibility to use the LCD screen for messages display
(transfer status: Ongoing, PASSED, FAILED).
To enable this option uncomment the define ENABLE_LCD_MSG_DISPLAY in the main.c
file.

Note : By Default this example is configured to run with M24LR64 EEPROM. Refer to 
       stm32303c_eval_i2c_ee.h file to change supported EEPROM and update the
       I2C_TIMING. 
       
@par Directory contents 

  - I2C/I2C_EEPROM/stm32f30x_conf.h    Library Configuration file
  - I2C/I2C_EEPROM/stm32f30x_it.c      Interrupt handlers
  - I2C/I2C_EEPROM/stm32f30x_it.h      Interrupt handlers header file
  - I2C/I2C_EEPROM/main.c              Main program
  - I2C/I2C_EEPROM/main.h              Main program header file   
  - I2C/I2C_EEPROM/system_stm32f30x.c  STM32F30x system source file
  
@note The "system_stm32f30x.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32F30x_Clock_Configuration_V1.0.0.xls" 
      provided with the AN4152 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
      
@par Hardware and Software environment

  - This example runs on STM32F30x Devices.
  
  - This example has been tested with STMicroelectronics STM32303C-EVAL (STM32F30x)
    evaluation board and can be easily tailored to any other supported device 
    and development board. 

  - STM32303C-EVAL Set-up
    - When communicating with M24LR64 EEPROM, make sure that M24LR64 is inserted in CN1 connector and 
      JP5 and JP6 jumpers are fitted in position 1-2.
    - When communicating with M24M01 EEPROM, make sure that JP5 and JP6 jumpers are fitted in position 2-3
      and JP8 is fitted.
    
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Projects\STM32F30x_StdPeriph_Templates
 - Open your preferred toolchain
 - Add the following file the project source list
    - Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval.c
    - Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval_lcd.c
    - Utilities\STM32_EVAL\STM32303C_EVAL\stm32303c_eval_i2c_ee.c
 - Before building the project please make sure that "USE_DEFAULT_TIMEOUT_CALLBACK" 
   define is removed from Preprocessor defines under C/C++ compiler settings.  
 - Rebuild all files and load your image into target memory
 - Run the example
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */
